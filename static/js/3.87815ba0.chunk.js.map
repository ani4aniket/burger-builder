{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,gBAAkB,4B,oBCApCD,EAAOC,QAAU,CAAC,YAAc,4B,iICuBjBC,EAnBS,SAACC,GACrB,OACI,yBAAKC,UAAWC,IAAQC,iBACpB,uDACA,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChC,kBAACC,EAAA,EAAD,CAAQC,YAAaR,EAAMQ,eAE/B,kBAACC,EAAA,EAAD,CACIC,QAAQ,SACRC,QAASX,EAAMY,mBAFnB,UAIA,kBAACH,EAAA,EAAD,CACIC,QAAQ,UACRC,QAASX,EAAMa,mBAFnB,c,yFCLNC,E,2MACFC,MAAQ,CACJC,UAAW,CACPC,KAAM,CACFC,YAAa,QACbC,cAAe,CACXC,KAAM,OACNC,YAAa,aAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEbC,OAAO,CACHT,YAAa,QACbC,cAAe,CACXC,KAAM,OACNC,YAAa,UAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEbE,QAAS,CACLV,YAAa,QACbC,cAAe,CACXC,KAAM,OACNC,YAAa,YAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVK,UAAW,EACXC,UAAW,GAEfL,OAAO,EACPC,SAAS,GAEbK,QAAS,CACLb,YAAa,QACbC,cAAe,CACXC,KAAM,OACNC,YAAa,WAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEbM,MAAO,CACHd,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,eAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACPC,SAAS,GAEbO,eAAgB,CACZf,YAAa,SACbC,cAAe,CACXe,QAAS,CACL,CAACZ,MAAO,UAAWa,aAAc,WACjC,CAACb,MAAO,WAAYa,aAAc,cAG1Cb,MAAO,UACPC,WAAY,GACZE,OAAO,IAGfW,aAAa,G,EAGjBC,aAAe,SAACC,GACZA,EAAMC,iBAEN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyB,EAAK1B,MAAMC,UACzCwB,EAASC,GAAyB,EAAK1B,MAAMC,UAAUyB,GAAuBnB,MAGlF,IAAMoB,EAAQ,CACVlC,YAAa,EAAKR,MAAM2C,KACxBC,MAAO,EAAK5C,MAAM4C,MAClBC,UAAWL,EACXM,OAAQ,EAAK9C,MAAM8C,QAGvB,EAAK9C,MAAM+C,cAAcL,EAAO,EAAK1C,MAAMgD,Q,EAK/CC,oBAAsB,SAACX,EAAOY,GAE1B,IAAMC,EAAqBC,YAAa,EAAKrC,MAAMC,UAAUkC,GAAkB,CAC3E5B,MAAOgB,EAAMe,OAAO/B,MACpBG,MAAO6B,YAAchB,EAAMe,OAAO/B,MAAO,EAAKP,MAAMC,UAAUkC,GAAiB3B,YAC/EG,SAAS,IAEP6B,EAAmBH,YAAa,EAAKrC,MAAMC,UAAZ,eAChCkC,EAAkBC,IAGnBf,GAAc,EAClB,IAAK,IAAIc,KAAmBK,EACxBnB,EAAcmB,EAAiBL,GAAiBzB,OAASW,EAE7D,EAAKoB,SAAS,CAACxC,UAAWuC,EAAkBnB,YAAaA,K,wEAInD,IAAD,OACCqB,EAAoB,GAC1B,IAAK,IAAIC,KAAOC,KAAK5C,MAAMC,UACvByC,EAAkBG,KAAK,CACnBC,GAAIH,EACJI,OAAQH,KAAK5C,MAAMC,UAAU0C,KAGrC,IAAIK,EACA,0BAAMC,SAAUL,KAAKtB,cAChBoB,EAAkBQ,KAAI,SAAAC,GAAW,OAC9B,kBAACC,EAAA,EAAD,CACIT,IAAKQ,EAAYL,GACjB3C,YAAagD,EAAYJ,OAAO5C,YAChCC,cAAe+C,EAAYJ,OAAO3C,cAClCG,MAAO4C,EAAYJ,OAAOxC,MAC1B8C,SAAUF,EAAYJ,OAAOrC,MAC7B4C,eAAgBH,EAAYJ,OAAOvC,WACnCG,QAASwC,EAAYJ,OAAOpC,QAC5B4C,QAAS,SAAChC,GAAD,OAAW,EAAKW,oBAAoBX,EAAO4B,EAAYL,UAIxE,kBAACpD,EAAA,EAAD,CAAQC,QAAQ,UAAU6D,UAAWZ,KAAK5C,MAAMqB,aAAhD,UAMR,OAHGuB,KAAK3D,MAAMwE,UACVT,EAAO,kBAACU,EAAA,EAAD,OAGP,yBAAKxE,UAAWC,IAAQY,aACpB,uDACCiD,O,GA7JSW,aAmLXC,eAhBS,SAAA5D,GACpB,MAAO,CACH4B,KAAM5B,EAAM6D,cAAcpE,YAC1BoC,MAAO7B,EAAM6D,cAAcC,WAC3BL,QAASzD,EAAM2B,MAAM8B,QACrBxB,MAAOjC,EAAM+D,KAAK9B,MAClBF,OAAQ/B,EAAM+D,KAAKhC,WAIA,SAACiC,GACxB,MAAO,CACHhC,cAAe,SAACF,EAAWG,GAAZ,OAAsB+B,EAASC,IAAuBnC,EAAWG,QAIzE2B,CAA4CM,YAAiBnE,EAAaoE,MCxLnFC,E,2MAEDC,yBAA2B,WACxB,EAAKpF,MAAMqF,QAAQC,U,EAGtBC,yBAA2B,WACvB,EAAKvF,MAAMqF,QAAQG,QAAQ,2B,wEAI5B,IAAIC,EAAU,kBAAC,IAAD,CAAUC,GAAG,MACrBC,EAAoBhC,KAAK3D,MAAM4F,UAAY,kBAAC,IAAD,CAAUF,GAAG,MAAS,KAgBvE,OAfG/B,KAAK3D,MAAM2C,OACV8C,EACI,6BACKE,EACD,kBAAC,EAAD,CACAnF,YAAamD,KAAK3D,MAAM2C,KACxB/B,kBAAmB+C,KAAKyB,yBACxBvE,kBAAmB8C,KAAK4B,2BAExB,kBAAC,IAAD,CACAM,KAAMlC,KAAK3D,MAAM8F,MAAMD,KAAO,gBAC9BE,UAAWjF,MAIhB2E,M,GA5BQf,aAwCRC,uBARS,SAAA5D,GACpB,MAAO,CACH4B,KAAM5B,EAAM6D,cAAcpE,YAC1BoF,UAAW7E,EAAM2B,MAAMkD,aAKhBjB,CAAyBQ,I,gCC9CxC,qCAuDea,IAnDD,SAAChG,GACX,IAAIiG,EAAe,KACbC,EAAe,CAAChG,IAAQiG,cAM9B,OAJGnG,EAAMoE,SAAWpE,EAAMqE,gBAAkBrE,EAAM0B,SAC9CwE,EAAatC,KAAK1D,IAAQkG,SAGtBpG,EAAMkB,aACV,IAAM,QACF+E,EAAe,yCACXhG,UAAWiG,EAAaG,KAAK,MACzBrG,EAAMmB,cAFC,CAGXG,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMsE,WACpB,MACJ,IAAM,WACF2B,EAAe,4CACXhG,UAAWiG,EAAaG,KAAK,MACzBrG,EAAMmB,cAFC,CAGXG,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMsE,WACpB,MACJ,IAAM,SACF2B,EACI,4BACIhG,UAAWiG,EAAaG,KAAK,KAC7B/E,MAAOtB,EAAMsB,MACbgF,SAAUtG,EAAMsE,SACXtE,EAAMmB,cAAce,QAAQ+B,KAAI,SAAAsC,GAAM,OACnC,4BAAQ7C,IAAK6C,EAAOjF,MAAOA,MAAOiF,EAAOjF,OACpCiF,EAAOpE,kBAK5B,MACJ,QACI8D,EAAe,yCACXhG,UAAWiG,EAAaG,KAAK,MACzBrG,EAAMmB,cAFC,CAGXG,MAAOtB,EAAMsB,SAEzB,OACI,yBAAKrB,UAAWC,IAAQiE,OACpB,2BAAOlE,UAAWC,IAAQsG,OAAQxG,EAAMyG,OACvCR,K,mBCjDbpG,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,MAAQ,wBAAwB,aAAe,0BAA0B,QAAU","file":"static/js/3.87815ba0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1xBm4j5hECL-q6sCIhiBB4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_1J81rlRO5zxuF98VMkEamZ\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return ( \n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}\n                >CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}\n                >CONTINUE</Button>\n        </div>\n     );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\nimport classes from './ContactData.css'\nclass ContactData extends Component {\n    state = { \n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}   \n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        formIsValid: false\n     }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token)\n        \n    }\n\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n\n    render() { \n        const formElementsArray = [];\n        for (let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        />\n                ))}\n                \n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n        return ( \n            <div className={classes.ContactData}>\n                <h4>Enter your Contact data</h4>\n                {form}\n            </div>\n         );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n \nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect} from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n\n     checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n     }\n\n     checkoutContinuedHandler = () => {\n         this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() { \n        let summary = <Redirect to=\"/\" />\n        const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n        if(this.props.ings){\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                    ingredients={this.props.ings} \n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler}\n                    />\n                    <Route \n                    path={this.props.match.path + '/contact-data'} \n                    component={ContactData}/>\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\n \nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType){\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value}\n                    onChange={props.changed}>\n                        {props.elementConfig.options.map(option => (\n                            <option key={option.value} value={option.value}>\n                                {option.displayValue}\n                            </option>\n                        ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} />\n    }\n    return ( \n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n     );\n}\n \nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};"],"sourceRoot":""}