{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","test","isNumeric","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.819931ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2YUr1vYMbwujw6K1HuakLc\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = { \n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n     }\n    \n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject( this.state.controls, {\n            [controlName]: updateObject( this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            } )\n        } );\n        this.setState( { controls: updatedControls } );\n    }\n\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        })\n    }\n\n    render() { \n        const formElementsArray = [];\n        for (let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n        ));\n        \n        if (this.props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if(this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n        \n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return ( \n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n            <Button \n                clicked={this.switchAuthModeHandler}\n                btnType=\"Danger\">SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}</Button>\n            </div>\n         );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n \nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch (props.elementType){\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses.join(' ')} \n                    value={props.value}\n                    onChange={props.changed}>\n                        {props.elementConfig.options.map(option => (\n                            <option key={option.value} value={option.value}>\n                                {option.displayValue}\n                            </option>\n                        ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                className={inputClasses.join(' ')} \n                {...props.elementConfig} \n                value={props.value} />\n    }\n    return ( \n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n     );\n}\n \nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};"],"sourceRoot":""}